_target_: topobenchmarkx.models.TopologicalNetworkModule

model_name: ccxn
model_domain: cell

feature_encoder:
  _target_: topobenchmarkx.models.encoders.${model.feature_encoder.encoder_name}
  encoder_name: AllCellFeatureEncoder
  in_channels: ${infer_in_channels:${dataset}} #${dataset.parameters.num_features}
  out_channels: 128
  proj_dropout: 0.5

backbone:
  _target_: topomodelx.nn.cell.ccxn.CCXN
  in_channels_0: ${model.feature_encoder.out_channels}
  in_channels_1: ${model.feature_encoder.out_channels}
  in_channels_2: ${model.feature_encoder.out_channels}
  n_layers: 4
  att: True

backbone_additional_params:
  hidden_channels: ${model.feature_encoder.out_channels}

backbone_wrapper:
  _target_: topobenchmarkx.models.wrappers.CCXNWrapper
  _partial_: true
  wrapper_name: CCXNWrapper
  out_channels: ${model.feature_encoder.out_channels}
  num_cell_dimensions: ${infere_list_length:${model.feature_encoder.in_channels}}

readout:
  _target_: topobenchmarkx.models.readouts.${model.readout.readout_name}
  readout_name: PropagateSignalDown #  Use <NoReadOut> in case readout is not needed Options: PropagateSignalDown
  hidden_dim: ${model.feature_encoder.out_channels}
  num_cell_dimensions: ${infere_list_length:${model.feature_encoder.in_channels}}

head_model:
  _target_: topobenchmarkx.models.head_models.${model.head_model.head_model_name}
  head_model_name: ZeroCellModel
  in_channels: ${model.feature_encoder.out_channels}
  out_channels: ${dataset.parameters.num_classes}
  task_level: ${dataset.parameters.task_level}
  pooling_type: sum

loss:
  _target_: topobenchmarkx.models.losses.DefaultLoss
  task: ${dataset.parameters.task}
  loss_type: ${dataset.parameters.loss_type}

optimizer:
  _target_: torch.optim.Adam
  _partial_: true
  lr: 0.001
  weight_decay: 0.0

scheduler:
  _target_: torch.optim.lr_scheduler.StepLR
  _partial_: true
  step_size: 50
  gamma: 0.5

# compile model for faster training with pytorch 2.0
compile: false
